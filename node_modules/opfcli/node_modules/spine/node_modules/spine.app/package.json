{
  "name": "spine.app",
  "description": "Spine app generator",
  "version": "0.2.9",
  "repository": {
    "type": "git",
    "url": "git://github.com/maccman/spine.app.git"
  },
  "author": {
    "name": "Alex MacCaw",
    "email": "info@eribium.org"
  },
  "bin": {
    "spine": "./bin/spine"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "coffee-script": "~1.1.2",
    "hem": "~0.1.5",
    "mkdirp": "~0.1.0",
    "ansi-color": "~0.2.1"
  },
  "readme": "##Introduction\n\nEffortlessly generate [Spine](http://maccman.github.com/spine), [CoffeeScript](http://jashkenas.github.com/coffee-script) and [Hem](https://github.com/maccman/hem) applications. Spine.App gives your applications structure, CommonJS modules, a development server and more. \n\n##Usage\n\nFirst step is to install the [npm](http://npmjs.org/) package. If you don't already have [npm](http://npmjs.org/) or [NodeJS](http://nodejs.org/) you'll need to install them first.\n\n    $ npm install -g spine.app\n\nThen we can generate the initial application structure like this:\n\n    $ spine app my_app\n    \nNow we've produced a directory structure looking like:\n\n    my_app\n    my_app/app\n    my_app/app/controllers\n    my_app/app/models\n    my_app/css/index.styl\n    my_app/lib\n    my_app/lib/jquery.js\n    my_app/lib/spine.js\n    my_app/public\n    my_app/public/index.html\n    my_app/public/css\n    my_app/public/images\n    my_app/index.js\n\nFirst let's navigate to our application, and install it's npm dependencies:\n    \n    $ cd my_app\n    $ npm install .\n    \nThese will be exported locally in the `./npm_modules` folder. Now, let's install [Hem](http://github.com/maccman/hem), which will be in charge or bundling our application.\n\n    $ npm install -g hem\n    \nAnd to serve our application up:\n    \n    $ hem server\n    \nThis will boot up an server on port [9294](http://localhost:9294). You can now start generating Spine controllers and models:\n    \n    $ spine controller users\n        app/controllers/users.coffee\n    \n    $ spine model user\n      app/models/user.coffee\n    \nAny application specific code should go in the `app` folder. Otherwise, generic code, should go in the `lib` folder. \n\nAny [CoffeeScript](http://jashkenas.github.com/coffee-script) or [Stylus](http://learnboost.github.com/stylus/) files inside the application will be automatically compiled when requested, you don't need to worry about compiling them manually. \n\n[Stitch](https://github.com/sstephenson/stitch) bundles up all your JavaScript files, enclosing them in a CommonJS wrapper. This means that scripts in the `app` folder need to be CommonJS compliant (basically exactly like normal Node scripts). In other words, to use a module you'll need to `require()` it, and you'll need to explicitly export any global variables. \n\n    Guide = require(\"controllers/guide\")\n    \n    class App extends Spine.Controller\n      elements:\n        \"#item\": \"item\"\n      \n      init ->\n        @guide = new Guide(el: @item)\n        \n    # Explicitly export it\n    module.exports = App\n        \nInside your HTML files, you need only require *application.js* and every module will be wrapped up and ready to be loaded. As you can see, the generated *index.html* kicks things off by instantiating *app/app.coffee* when the page loads.\n\n    var exports = this;\n    jQuery(function(){\n      var App = require(\"app\");\n      exports.App = new App({el: $(\"#body\")});      \n    });",
  "_id": "spine.app@0.2.9",
  "_from": "spine.app@~0.2.8"
}
